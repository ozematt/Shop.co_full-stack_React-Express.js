services:
  # frontend:
  #   build:
  #     context: ./frontend
  #   container_name: travel-app-frontend
  #   environment:
  #     - NODE_ENV=development
  #   ports:
  #     - "5173:5173"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules # Ensures proper functioning of dependencies
  #   command: npm run dev # Launches Vite development server

  mysql:
    image: mysql:latest # Wykorzystuje najnowszy obraz MySQL
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD=root # Hasło do użytkownika root
      MYSQL_DATABASE=shop_co_db # Nazwa bazy danych do stworzenia przy starcie
      MYSQL_USER=user # Nazwa użytkownika
      MYSQL_PASSWORD=userpass # Hasło dla użytkownika
    ports:
      - "3306:3306" # Mapowanie portów (port na hoście -> port w kontenerze)
    volumes:
      - mysql-data:/var/lib/mysql # Użycie wolumenu do przechowywania danych
    networks:
      - mysql-network # Sieć, w której będzie działał kontener

  backend:
    build: ./backend
    container_name: shop-co-backend
    environment:
      - JWT_SECRET=my_password_very_very
      - NODE_ENV=development
      - BACKEND_PORT=3005
    ports:
      - "3005:3005" # Mapowanie portów dla aplikacji Node.js
    depends_on:
      - mysql # Backend będzie zależny od kontenera z MySQL
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - mysql-network # Używa tej samej sieci, co MySQL

volumes:
  mysql-data: # Definicja wolumenu do przechowywania danych MySQL

networks:
  mysql-network: # Definicja sieci, w której będą kontenery
    driver: bridge
